// <auto-generated />
using System;
using HomeSweetHome.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeSweetHome.Migrations
{
    [DbContext(typeof(RentalDbContext))]
    partial class RentalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("HomeSweetHome.Models.ContactMessage", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SenderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SentDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SentDateAsDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("MessageId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("ContactMessages");

                    b.HasData(
                        new
                        {
                            MessageId = 1,
                            MessageText = "Is this still available?",
                            PostId = 1,
                            PostType = "Property",
                            ReceiverId = 1,
                            SenderId = 2,
                            SentDate = "2025-03-14 00:00:00",
                            SentDateAsDateTime = new DateTime(2025, 3, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HomeSweetHome.Models.Demand", b =>
                {
                    b.Property<int>("DemandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MinBathrooms")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinBedrooms")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DemandId");

                    b.HasIndex("UserId");

                    b.ToTable("Demands");

                    b.HasData(
                        new
                        {
                            DemandId = 1,
                            CreatedAt = new DateTime(2025, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Looking for a quiet apartment with good transit access.",
                            Location = "Downtown Vancouver",
                            MaxBudget = 1500.00m,
                            MinBathrooms = 1,
                            MinBedrooms = 2,
                            Title = "Seeking a 2-Bedroom Downtown",
                            UserId = 2
                        },
                        new
                        {
                            DemandId = 2,
                            CreatedAt = new DateTime(2025, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Looking for a house with a backyard.",
                            Location = "Burnaby",
                            MaxBudget = 2500.00m,
                            MinBathrooms = 2,
                            MinBedrooms = 3,
                            Title = "Need a Family Home",
                            UserId = 2
                        },
                        new
                        {
                            DemandId = 3,
                            CreatedAt = new DateTime(2025, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Affordable studio near downtown.",
                            Location = "Victoria",
                            MaxBudget = 1000.00m,
                            MinBathrooms = 1,
                            MinBedrooms = 1,
                            Title = "Looking for a Studio",
                            UserId = 4
                        },
                        new
                        {
                            DemandId = 4,
                            CreatedAt = new DateTime(2025, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Modern condo with amenities.",
                            Location = "Richmond",
                            MaxBudget = 1800.00m,
                            MinBathrooms = 1,
                            MinBedrooms = 2,
                            Title = "2-Bedroom Condo Wanted",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("HomeSweetHome.Models.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DemandId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FavoriteId");

                    b.HasIndex("DemandId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites", t =>
                        {
                            t.HasCheckConstraint("CK_Favorite_OneTarget", "[PropertyId] IS NOT NULL OR [DemandId] IS NOT NULL");
                        });

                    b.HasData(
                        new
                        {
                            FavoriteId = 1,
                            CreatedAt = new DateTime(2025, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PropertyId = 1,
                            UserId = 2
                        },
                        new
                        {
                            FavoriteId = 2,
                            CreatedAt = new DateTime(2025, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DemandId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("HomeSweetHome.Models.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Images")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            PropertyId = 1,
                            Bathrooms = 1,
                            Bedrooms = 2,
                            CreatedAt = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A nice 2-bedroom apartment",
                            Images = "[\"/images/properties/cozy_apartment1.jpg\",\"/images/properties/cozy_apartment2.jpg\"]",
                            Location = "Downtown Vancouver",
                            Price = 1200.00m,
                            Title = "Cozy Apartment",
                            UserId = 1
                        },
                        new
                        {
                            PropertyId = 2,
                            Bathrooms = 2,
                            Bedrooms = 3,
                            CreatedAt = new DateTime(2025, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Bright and spacious condo with a view",
                            Images = "[\"/images/properties/sunny_condo1.jpg\"]",
                            Location = "Victoria",
                            Price = 1500.00m,
                            Title = "Sunny Condo",
                            UserId = 1
                        },
                        new
                        {
                            PropertyId = 3,
                            Bathrooms = 1,
                            Bedrooms = 1,
                            CreatedAt = new DateTime(2025, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Stylish loft in the heart of the city",
                            Images = "[\"/images/properties/modern_loft1.jpg\"]",
                            Location = "Surrey",
                            Price = 1800.00m,
                            Title = "Modern Loft",
                            UserId = 3
                        },
                        new
                        {
                            PropertyId = 4,
                            Bathrooms = 3,
                            Bedrooms = 4,
                            CreatedAt = new DateTime(2025, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Perfect for a small family",
                            Images = "[\"/images/properties/family_house1.jpg\"]",
                            Location = "Burnaby",
                            Price = 2000.00m,
                            Title = "Family House",
                            UserId = 3
                        },
                        new
                        {
                            PropertyId = 5,
                            Bathrooms = 1,
                            Bedrooms = 1,
                            CreatedAt = new DateTime(2025, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Compact and affordable studio",
                            Images = "[\"/images/properties/cozy_studio1.jpg\"]",
                            Location = "Richmond",
                            Price = 900.00m,
                            Title = "Cozy Studio",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("HomeSweetHome.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Avatar")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Avatar = "/images/avatars/john_doe.jpg",
                            Email = "john@example.com",
                            PasswordHash = "$2a$11$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                            Username = "john_doe"
                        },
                        new
                        {
                            UserId = 2,
                            Avatar = "/images/avatars/jane_smith.jpg",
                            Email = "jane@example.com",
                            PasswordHash = "$2a$11$yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy",
                            Username = "jane_smith"
                        },
                        new
                        {
                            UserId = 3,
                            Avatar = "/images/avatars/alice_wong.jpg",
                            Email = "alice@example.com",
                            PasswordHash = "$2a$11$zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
                            Username = "alice_wong"
                        },
                        new
                        {
                            UserId = 4,
                            Avatar = "/images/avatars/bob_lee.jpg",
                            Email = "bob@example.com",
                            PasswordHash = "$2a$11$wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
                            Username = "bob_lee"
                        });
                });

            modelBuilder.Entity("HomeSweetHome.Models.ContactMessage", b =>
                {
                    b.HasOne("HomeSweetHome.Models.Property", null)
                        .WithMany("Messages")
                        .HasForeignKey("PropertyId");

                    b.HasOne("HomeSweetHome.Models.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HomeSweetHome.Models.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("HomeSweetHome.Models.Demand", b =>
                {
                    b.HasOne("HomeSweetHome.Models.User", "User")
                        .WithMany("Demands")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeSweetHome.Models.Favorite", b =>
                {
                    b.HasOne("HomeSweetHome.Models.Demand", "Demand")
                        .WithMany()
                        .HasForeignKey("DemandId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HomeSweetHome.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HomeSweetHome.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demand");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeSweetHome.Models.Property", b =>
                {
                    b.HasOne("HomeSweetHome.Models.User", "User")
                        .WithMany("Properties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HomeSweetHome.Models.Property", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("HomeSweetHome.Models.User", b =>
                {
                    b.Navigation("Demands");

                    b.Navigation("Favorites");

                    b.Navigation("Properties");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
